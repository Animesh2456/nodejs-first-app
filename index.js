import express from 'express';
import path from 'path';
import mongoose, { now } from "mongoose";
import cookieParser from 'cookie-parser';
import jwt from "jsonwebtoken";
import bodyParser from 'body-parser';
import bcrypt from "bcrypt";


// connecting to database
mongoose.connect("mongodb://127.0.0.1:27017",{
  dbName: "backend",
})
.then(()=>console.log("Database Connected"))
.catch((e)=>console.log(e));

//making schema
const userSchema=new mongoose.Schema({
  name:String,
  email:String,
  password:String,
});

const User=mongoose.model("User",userSchema)

const app=express();

app.use(bodyParser.urlencoded({ extended: false }));


//using middlewares
app.use(express.static(path.join(path.resolve(),"public")));
// app.use(express.urlencoded({extended: true}));
app.use(cookieParser());

// setting up view Enjine
app.set("view engine", "ejs");
app.set("views","./views");

app.get("/login",(req,res)=>{
  res.render("login");
})

app.get("/register", (req,res)=>{
  res.render("register"); 
})

// for logout
app.get("/logout",(req,res)=>{
  res.cookie("token",null,{  //keeping the value of token as null
   httpOnly:true,
   expires: new Date(Date.now()), //this will expire in second
  });
  res.redirect("/");
});


//from the below code u can see all the cookie printed in terminal
//for login
// app.get("/",(req,res)=>{
 
//   // console.log(req.cookies.token); //req.cookies.token will return the value i.e iamin
//   const {token}=req.cookies;  //equivalent to above code
//   if(token){
//     res.render("logout");
//   }else{
//     res.render("login");
//   }

// });

//login



//creating cookie here
//register code also
app.post("/register",async(req,res)=>{

  const {name,email,password}=req.body;
   let user=await User.findOne({email});
   if(user){
    return res.redirect("/login");
   }
   const hashedPassword=await bcrypt.hash(password,10); //here we hashisng the password
   user=await User.create({
    name,
    email,
    password:hashedPassword,
  }); 
   const token=jwt.sign({_id:user._id},"asdfghjkl");
   //console.log(token);
   res.cookie("token", token,{  // user._id is the id that will be generated by system(Primary key) 
           //and this id is the value of token it is instead of "iamin" 
    httpOnly:true,
    expires:new Date(Date.now() + 60 *1000),
   });
   res.redirect("/"); 
   
})

// isAuthenticated is a middleware which will check if the token exist then
// next() will call and logout option will appear 
// else login option will appear

const isAuthenticated =async(req,res,next)=>{  
  const { token } =req.cookies;
   if(token){
      const decoded=jwt.verify(token,"asdfghjkl") //it will the user_id
      //console.log(decoded);
      req.user=await User.findById(decoded._id)     
      next();
   }else{
    res.redirect("/login");
   }
}
app.get("/",isAuthenticated,(req,res)=>{
  //console.log(req.user); this will print the userdetail
  res.render("logout",{name: req.user.name});
});


app.post("/",(req,res)=>{
  console.log(req.body);
})
// app.get("/success",(req,res)=>{
//  res.render("success")          
// })
// this will create a simple url where in page Nice will get printed
// app.get("/add",(req,res)=>{
//   res.send("Nice");
// })

// app.get("/users",(req,res)=>{
//   res.json({
//     users,
//   })
// })

//login
app.post("/login",async(req,res)=>{
   const { email,password } = req.body;
  //console.log(req.body);

  // const email=req.body.email;
  // const password=req.body.password;
   try{
    let user=await User.findOne({email:email});
    console.log(user);
    if(!user){
      return res.redirect("/register");
    }
    const isMatch= await bcrypt.compare(password,user.password);  //this is hashing the given password and then comparing to user hashed password
  
    if(!isMatch) return res.render("login",{email,message:"Incorrect Password"});
   
    const token=jwt.sign({_id:user._id},"asdfghjkl");
    //console.log(token);
    res.cookie("token", token,{  
                                // user._id is the id that will be generated by system(Primary key) 
                               //and this id is the value of token it is instead of "iamin" 
     httpOnly:true,
     expires:new Date(Date.now() + 60 *1000),
    });
    res.redirect("/"); 
   }
   catch(err){console.log(err)}
  

})


app.listen(5000, ()=>{
  console.log("server is working");  
});

